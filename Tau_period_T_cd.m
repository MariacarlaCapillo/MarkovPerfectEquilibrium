function tax_solve = Tau_period_T_cd(sy,sm,wage_tom,interest_tom, a_y,a_m,omega_m,omega_r,coh_grow_yes,coh_grow_tod,coh_grow_tom)

%Tau_period_T_cd solves the political FOC for the tax rate tomorrow

% Tau_period_T_cd(sy,sm,wage_tom,interest_tom) solves the First order condition of the political
% agent for the tax rate and, if there are multiple solutions, chooses
% the most appropriate one. This is only done in period T since in this
% period we have an analytical solution. Starting in period T-1 we will rely
% on a numerically produced tax function.

% Solve the FOC for the tax rate 'tax'
%taut = solve((1/(1-tax)+(omega_m*wage_tom*a_m)/(coh_grow_tom*(wage_tom*a_m*(1-tax)+interest_tom*sy))-(omega_r*(a_m*coh_grow_tod+a_y*coh_grow_tom*coh_grow_tod)*wage_tom)/(coh_grow_tom*coh_grow_tod*(interest_tom*sm+(a_m*coh_grow_tod+a_y*coh_grow_tom*coh_grow_tod)*wage_tom*tax)))== 0 , tax);
taut = [(2*a_m^2*omega_r*wage_tom - (a_m^4*coh_grow_tod^2*coh_grow_tom^2*wage_tom^2 + 2*a_m^4*coh_grow_tod^2*coh_grow_tom*omega_m*wage_tom^2 + a_m^4*coh_grow_tod^2*omega_m^2*wage_tom^2 + 2*a_m^3*a_y*coh_grow_tod^2*coh_grow_tom^3*wage_tom^2 + 4*a_m^3*a_y*coh_grow_tod^2*coh_grow_tom^2*omega_m*wage_tom^2 + 2*a_m^3*a_y*coh_grow_tod^2*coh_grow_tom*omega_m^2*wage_tom^2 + 2*a_m^3*coh_grow_tod^2*coh_grow_tom^2*interest_tom*sy*wage_tom + 2*a_m^3*coh_grow_tod^2*coh_grow_tom*interest_tom*omega_m*sy*wage_tom + 2*a_m^3*coh_grow_tod*coh_grow_tom^2*interest_tom*sm*wage_tom + 4*a_m^3*coh_grow_tod*coh_grow_tom*interest_tom*omega_m*sm*wage_tom + 2*a_m^3*coh_grow_tod*coh_grow_tom*interest_tom*omega_r*sy*wage_tom + 2*a_m^3*coh_grow_tod*interest_tom*omega_m^2*sm*wage_tom - 2*a_m^3*coh_grow_tod*interest_tom*omega_m*omega_r*sy*wage_tom + a_m^2*a_y^2*coh_grow_tod^2*coh_grow_tom^4*wage_tom^2 + 2*a_m^2*a_y^2*coh_grow_tod^2*coh_grow_tom^3*omega_m*wage_tom^2 + a_m^2*a_y^2*coh_grow_tod^2*coh_grow_tom^2*omega_m^2*wage_tom^2 + 4*a_m^2*a_y*coh_grow_tod^2*coh_grow_tom^3*interest_tom*sy*wage_tom + 4*a_m^2*a_y*coh_grow_tod^2*coh_grow_tom^2*interest_tom*omega_m*sy*wage_tom + 2*a_m^2*a_y*coh_grow_tod*coh_grow_tom^3*interest_tom*sm*wage_tom + 4*a_m^2*a_y*coh_grow_tod*coh_grow_tom^2*interest_tom*omega_m*sm*wage_tom + 4*a_m^2*a_y*coh_grow_tod*coh_grow_tom^2*interest_tom*omega_r*sy*wage_tom + 2*a_m^2*a_y*coh_grow_tod*coh_grow_tom*interest_tom*omega_m^2*sm*wage_tom - 4*a_m^2*a_y*coh_grow_tod*coh_grow_tom*interest_tom*omega_m*omega_r*sy*wage_tom + a_m^2*coh_grow_tod^2*coh_grow_tom^2*interest_tom^2*sy^2 + 2*a_m^2*coh_grow_tod*coh_grow_tom^2*interest_tom^2*sm*sy + 2*a_m^2*coh_grow_tod*coh_grow_tom*interest_tom^2*omega_m*sm*sy + 2*a_m^2*coh_grow_tod*coh_grow_tom*interest_tom^2*omega_r*sy^2 + a_m^2*coh_grow_tom^2*interest_tom^2*sm^2 + 2*a_m^2*coh_grow_tom*interest_tom^2*omega_m*sm^2 + 2*a_m^2*coh_grow_tom*interest_tom^2*omega_r*sm*sy + a_m^2*interest_tom^2*omega_m^2*sm^2 - 2*a_m^2*interest_tom^2*omega_m*omega_r*sm*sy + a_m^2*interest_tom^2*omega_r^2*sy^2 + 2*a_m*a_y^2*coh_grow_tod^2*coh_grow_tom^4*interest_tom*sy*wage_tom + 2*a_m*a_y^2*coh_grow_tod^2*coh_grow_tom^3*interest_tom*omega_m*sy*wage_tom + 2*a_m*a_y^2*coh_grow_tod*coh_grow_tom^3*interest_tom*omega_r*sy*wage_tom - 2*a_m*a_y^2*coh_grow_tod*coh_grow_tom^2*interest_tom*omega_m*omega_r*sy*wage_tom + 2*a_m*a_y*coh_grow_tod^2*coh_grow_tom^3*interest_tom^2*sy^2 + 2*a_m*a_y*coh_grow_tod*coh_grow_tom^3*interest_tom^2*sm*sy + 2*a_m*a_y*coh_grow_tod*coh_grow_tom^2*interest_tom^2*omega_m*sm*sy + 4*a_m*a_y*coh_grow_tod*coh_grow_tom^2*interest_tom^2*omega_r*sy^2 + 2*a_m*a_y*coh_grow_tom^2*interest_tom^2*omega_r*sm*sy - 2*a_m*a_y*coh_grow_tom*interest_tom^2*omega_m*omega_r*sm*sy + 2*a_m*a_y*coh_grow_tom*interest_tom^2*omega_r^2*sy^2 + a_y^2*coh_grow_tod^2*coh_grow_tom^4*interest_tom^2*sy^2 + 2*a_y^2*coh_grow_tod*coh_grow_tom^3*interest_tom^2*omega_r*sy^2 + a_y^2*coh_grow_tom^2*interest_tom^2*omega_r^2*sy^2)^(1/2) - a_m*coh_grow_tom*interest_tom*sm - a_m*interest_tom*omega_m*sm + a_m*interest_tom*omega_r*sy + a_m^2*coh_grow_tod*coh_grow_tom*wage_tom + a_m^2*coh_grow_tod*omega_m*wage_tom + a_m*coh_grow_tod*coh_grow_tom*interest_tom*sy + 2*a_m*a_y*coh_grow_tom*omega_r*wage_tom + a_y*coh_grow_tom*interest_tom*omega_r*sy + a_m*a_y*coh_grow_tod*coh_grow_tom^2*wage_tom + a_y*coh_grow_tod*coh_grow_tom^2*interest_tom*sy + a_m*a_y*coh_grow_tod*coh_grow_tom*omega_m*wage_tom)/(2*(a_m^2*omega_r*wage_tom + a_m^2*coh_grow_tod*coh_grow_tom*wage_tom + a_m^2*coh_grow_tod*omega_m*wage_tom + a_m*a_y*coh_grow_tom*omega_r*wage_tom + a_m*a_y*coh_grow_tod*coh_grow_tom^2*wage_tom + a_m*a_y*coh_grow_tod*coh_grow_tom*omega_m*wage_tom));((a_m^4*coh_grow_tod^2*coh_grow_tom^2*wage_tom^2 + 2*a_m^4*coh_grow_tod^2*coh_grow_tom*omega_m*wage_tom^2 + a_m^4*coh_grow_tod^2*omega_m^2*wage_tom^2 + 2*a_m^3*a_y*coh_grow_tod^2*coh_grow_tom^3*wage_tom^2 + 4*a_m^3*a_y*coh_grow_tod^2*coh_grow_tom^2*omega_m*wage_tom^2 + 2*a_m^3*a_y*coh_grow_tod^2*coh_grow_tom*omega_m^2*wage_tom^2 + 2*a_m^3*coh_grow_tod^2*coh_grow_tom^2*interest_tom*sy*wage_tom + 2*a_m^3*coh_grow_tod^2*coh_grow_tom*interest_tom*omega_m*sy*wage_tom + 2*a_m^3*coh_grow_tod*coh_grow_tom^2*interest_tom*sm*wage_tom + 4*a_m^3*coh_grow_tod*coh_grow_tom*interest_tom*omega_m*sm*wage_tom + 2*a_m^3*coh_grow_tod*coh_grow_tom*interest_tom*omega_r*sy*wage_tom + 2*a_m^3*coh_grow_tod*interest_tom*omega_m^2*sm*wage_tom - 2*a_m^3*coh_grow_tod*interest_tom*omega_m*omega_r*sy*wage_tom + a_m^2*a_y^2*coh_grow_tod^2*coh_grow_tom^4*wage_tom^2 + 2*a_m^2*a_y^2*coh_grow_tod^2*coh_grow_tom^3*omega_m*wage_tom^2 + a_m^2*a_y^2*coh_grow_tod^2*coh_grow_tom^2*omega_m^2*wage_tom^2 + 4*a_m^2*a_y*coh_grow_tod^2*coh_grow_tom^3*interest_tom*sy*wage_tom + 4*a_m^2*a_y*coh_grow_tod^2*coh_grow_tom^2*interest_tom*omega_m*sy*wage_tom + 2*a_m^2*a_y*coh_grow_tod*coh_grow_tom^3*interest_tom*sm*wage_tom + 4*a_m^2*a_y*coh_grow_tod*coh_grow_tom^2*interest_tom*omega_m*sm*wage_tom + 4*a_m^2*a_y*coh_grow_tod*coh_grow_tom^2*interest_tom*omega_r*sy*wage_tom + 2*a_m^2*a_y*coh_grow_tod*coh_grow_tom*interest_tom*omega_m^2*sm*wage_tom - 4*a_m^2*a_y*coh_grow_tod*coh_grow_tom*interest_tom*omega_m*omega_r*sy*wage_tom + a_m^2*coh_grow_tod^2*coh_grow_tom^2*interest_tom^2*sy^2 + 2*a_m^2*coh_grow_tod*coh_grow_tom^2*interest_tom^2*sm*sy + 2*a_m^2*coh_grow_tod*coh_grow_tom*interest_tom^2*omega_m*sm*sy + 2*a_m^2*coh_grow_tod*coh_grow_tom*interest_tom^2*omega_r*sy^2 + a_m^2*coh_grow_tom^2*interest_tom^2*sm^2 + 2*a_m^2*coh_grow_tom*interest_tom^2*omega_m*sm^2 + 2*a_m^2*coh_grow_tom*interest_tom^2*omega_r*sm*sy + a_m^2*interest_tom^2*omega_m^2*sm^2 - 2*a_m^2*interest_tom^2*omega_m*omega_r*sm*sy + a_m^2*interest_tom^2*omega_r^2*sy^2 + 2*a_m*a_y^2*coh_grow_tod^2*coh_grow_tom^4*interest_tom*sy*wage_tom + 2*a_m*a_y^2*coh_grow_tod^2*coh_grow_tom^3*interest_tom*omega_m*sy*wage_tom + 2*a_m*a_y^2*coh_grow_tod*coh_grow_tom^3*interest_tom*omega_r*sy*wage_tom - 2*a_m*a_y^2*coh_grow_tod*coh_grow_tom^2*interest_tom*omega_m*omega_r*sy*wage_tom + 2*a_m*a_y*coh_grow_tod^2*coh_grow_tom^3*interest_tom^2*sy^2 + 2*a_m*a_y*coh_grow_tod*coh_grow_tom^3*interest_tom^2*sm*sy + 2*a_m*a_y*coh_grow_tod*coh_grow_tom^2*interest_tom^2*omega_m*sm*sy + 4*a_m*a_y*coh_grow_tod*coh_grow_tom^2*interest_tom^2*omega_r*sy^2 + 2*a_m*a_y*coh_grow_tom^2*interest_tom^2*omega_r*sm*sy - 2*a_m*a_y*coh_grow_tom*interest_tom^2*omega_m*omega_r*sm*sy + 2*a_m*a_y*coh_grow_tom*interest_tom^2*omega_r^2*sy^2 + a_y^2*coh_grow_tod^2*coh_grow_tom^4*interest_tom^2*sy^2 + 2*a_y^2*coh_grow_tod*coh_grow_tom^3*interest_tom^2*omega_r*sy^2 + a_y^2*coh_grow_tom^2*interest_tom^2*omega_r^2*sy^2)^(1/2) + 2*a_m^2*omega_r*wage_tom - a_m*coh_grow_tom*interest_tom*sm - a_m*interest_tom*omega_m*sm + a_m*interest_tom*omega_r*sy + a_m^2*coh_grow_tod*coh_grow_tom*wage_tom + a_m^2*coh_grow_tod*omega_m*wage_tom + a_m*coh_grow_tod*coh_grow_tom*interest_tom*sy + 2*a_m*a_y*coh_grow_tom*omega_r*wage_tom + a_y*coh_grow_tom*interest_tom*omega_r*sy + a_m*a_y*coh_grow_tod*coh_grow_tom^2*wage_tom + a_y*coh_grow_tod*coh_grow_tom^2*interest_tom*sy + a_m*a_y*coh_grow_tod*coh_grow_tom*omega_m*wage_tom)/(2*(a_m^2*omega_r*wage_tom + a_m^2*coh_grow_tod*coh_grow_tom*wage_tom + a_m^2*coh_grow_tod*omega_m*wage_tom + a_m*a_y*coh_grow_tom*omega_r*wage_tom + a_m*a_y*coh_grow_tod*coh_grow_tom^2*wage_tom + a_m*a_y*coh_grow_tod*coh_grow_tom*omega_m*wage_tom))];
% Change the format to double
tauT = double(taut);
% Check if there are multiple solutions (if there is one or two columns in
% the solution vector)
[m_tau,~]=size(tauT);
% If there are two solutions, choose the one that yields higher welfare.
if m_tau == 2
    welf_taut1 = log(wage_tom*a_y*(1-tauT(1,1)))+(omega_m/coh_grow_tom)*log(wage_tom*a_m*(1-tauT(1,1))+interest_tom*sy)+(omega_r/(coh_grow_tod*coh_grow_yes))*log(wage_tom*tauT(1,1)*(a_m*coh_grow_tod+a_y*coh_grow_tod*coh_grow_tom)+interest_tom*sm);
    % Check if solution is complex (indication that one of the consumption
    % levels is negative) and if true, set welfare to -inf
    if isreal(welf_taut1) == false
        welf_taut1 = -inf;
    end
    welf_taut2 = log(wage_tom*a_y*(1-tauT(2,1)))+(omega_m/coh_grow_tom)*log(wage_tom*a_m*(1-tauT(2,1))+interest_tom*sy)+(omega_r/(coh_grow_tod*coh_grow_yes))*log(wage_tom*tauT(2,1)*(a_m*coh_grow_tod+a_y*coh_grow_tod*coh_grow_tom)+interest_tom*sm);
    % Check if solution is complex (indication that one of the consumption
    % levels is negative) and if true, set welfare to -inf
    if isreal(welf_taut2) == false
        welf_taut2 = -inf;
    end
    if welf_taut1 > welf_taut2 
        tax_solve = tauT(1,1);
    else
        tax_solve = tauT(2,1);
    end
% If there is only one solution, take it
else
    tax_solve = tauT(1,1);
end


end

